name: Deloy App to EKS

on:
  push:
    branches:
      - "lifebit"   

jobs:
  build-deploy-app:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
       
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
     
      - name: Build and push
        working-directory: ./Lifebit-app
        run: |
          docker build -t jakhibi/lifebit-app .
          docker push jakhibi/lifebit-app

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        with:
          version: 'v1.24.0' # default is latest stable
        id: install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Update kube config
        run: aws eks update-kubeconfig --name eks-lifebit
    
      - name: Deploy to EKS
        working-directory: ./k8s
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl apply -f hpa.yaml
   
      # - name: Set up Go
      #   uses: actions/setup-go@v2
      #   with:
      #     go-version: 1.7  

      # - name: Run Hey Benchmark
      #   run: |
      #     go get -u github.com/rakyll/hey
      #     nohup hey -n 10 -c 2 -m POST -T "application/x-www-form-urlencoded" -d 'username=1&message=hello' http://your-rest-url/resource > hey_output.log 2>&1 &
    
      # - name: Wait for completion
      #   run: sleep 300  # Adjust the sleep duration as needed
          
      # I am thinking of the best way to curl the loadbalancer??? Remember to write the code! ${{Loadbalancer}}








